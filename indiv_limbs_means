function indiv_limbs_means(param, param_label, animal_names, limbs, x, data, colors, shading, exp_name, path)

%Only include data from animals in experiment
n_animals = numel(animal_names);
animal_indexes = find(ismember(data.animals, animal_names));

% Determine what the split sessions are (if there are any)
if ~isnan(data.session_info.first_split)
    split_sessions = [data.session_info.first_split-0.5 data.session_info.last_split+0.5];
else
    split_sessions = [];
end

% Get the y data for the animal and parameter in question
for i = 1:n_animals
    y(:,:,i) = data.regular.vars.(param)(:,:,animal_indexes(i));
end

% Calculate mean and standard deviation across all animals for an experiment
sum_limbs = nansum(y,3);
std_limbs = nanstd(y, 0, 3);
avg_limbs = sum_limbs./length(animal_indexes);

%Find the limb y-value difference between average FR (1) and each of the other limb averages
for lb = 1:3
    limb2(1,lb) = abs(avg_limbs(1,lb+1) - avg_limbs(1,1));
end

%Find the index of the limb average with the smallest y-value difference from the average FR (1)
[b, ind] = min(limb2); 
first = [1, ind+1];
second = setdiff(limbs, first);

% Create new figure and plot first subplot
fig = figure('Position', [680 558 380 450], 'Visible', 'off');
for lb = 1:length(first)
    subplot(2,1,1);
    plot(x, avg_limbs(:,first(lb)), colors{first(lb)}, 'LineWidth', 2); hold on;
    fill_between(x, avg_limbs(:,first(lb)), std_limbs(:,first(lb)), shading{first(lb)});
end
% Add dotted lines at beginning and end of split trials
for i = 1:length(split_sessions)
    xline(split_sessions(i), '--k', 'LineWidth', 0.5);
end

%Set x axis min and max
x_min = 0;
x_max = length(x) + 0.5;
xlim([x_min, x_max]);

% Plot second subplot    
for lb = 1:length(second)
    subplot(2,1,2);
    plot(x, avg_limbs(:,second(lb)), colors{second(lb)}, 'LineWidth', 2); hold on;
    fill_between(x, avg_limbs(:,second(lb)), std_limbs(:,second(lb)), shading{second(lb)});
end

% Add dotted lines at beginning and end of split trials
for i = 1:length(split_sessions)
    xline(split_sessions(i), '--k', 'LineWidth', 0.5);
end

%Set x axis min and max
x_min = 0;
x_max = length(x) + 0.5;
xlim([x_min, x_max]);

%Arrange subplots based on y-range (put y-axis in ascending order from bottom to top)
subplotHandles = findall(gcf, 'Type', 'axes');
yLimits = zeros(length(subplotHandles), 2);

for i = 1:length(subplotHandles)
    yLimits(i, :) = ylim(subplotHandles(i));
end

[~, sortedIndices] = sort(yLimits(:, 1));

for i = 1:length(sortedIndices)
      set(subplotHandles(sortedIndices(i)), 'Position', [0.1, 0.1 + 0.45*(i-1), 0.8, 0.4]);
end
hold off;

%Label x and y axes
plotlabel=axes(fig,'visible','off');
plotlabel.XLabel.Visible = 'on';
plotlabel.YLabel.Visible='on';
xlabel(plotlabel, 'Trials');
ylabel(plotlabel, param_label);

yLabelHandle = get(gca, 'ylabel');

% Adjust the position of the y-label
currentPosition = get(yLabelHandle, 'Position');
newPosition = currentPosition - [0.0165, 0, 0];  % Move x units to the left
set(yLabelHandle, 'Position', newPosition);

%Label graph title
n_animals = num2str(length(animal_names));
annotation('textbox', [0.5, 1, 0, 0], 'String', strcat(exp_name), 'HorizontalAlignment', 'center', 'FontSize', 11, 'FontWeight', 'bold');
annotation('textbox', [0.7, 0.85, 0.1, 0.1], 'String', ['n = ', n_animals], 'FitBoxToText', 'on', 'EdgeColor', 'none');

saveas(fig, fullfile(path, [exp_name, ' mean ', param, ' limb comparisons', '.png']));
saveas(fig, fullfile(path, [exp_name, ' mean ', param, ' limb comparisons', '.fig']));

close(fig);

end
