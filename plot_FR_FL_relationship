function plot_FR_FL_relationship(y_all, data, limbs, plot_list, colors, colors2)
% This function includes the calculations, plotting, and statistics for quantifying the spatial relationship between FR and FL relative to coo_body (FR-FL). Only useful when param = 'coo_body', i.e. stipulate "if p == 1" after j for loop has ended but within p for loop.

right_plots = [1, 2, 5, 6];
left_plots = [3, 4, 7, 8];

for b = 1:length(plot_list)
    plot_ds = plot_list{b}; 
    for pl = 1:length(plot_ds)
        j = plot_ds(pl);
        if pl == 1
            all_ys{2} = y_all{j};
            mean_y(:,:,2) = nanmean(all_ys{2}, 3);
           
            exp_name{2} = data{j}.caption;
            animal_names{2} = data{j}.animals;
        else
            all_ys{1} = y_all{j};
            mean_y(:,:,1) = nanmean(all_ys{1}, 3);

            exp_name{1} = data{j}.caption;
            animal_names{1} = data{j}.animals;
        end
     x = data{j}.show_trials;

% INDIVIDUAL ANIMALS
    % Get the number of animals in each experiment, return an error if the number of animals in each experiment doesn't match
    if numel(animal_names{1}) == numel(animal_names{2})
        n_animals = numel(animal_names{1});
    else
        disp('Error: Number of animals in each experiment does not match');
    end
    
    fig = figure('Position', [680 558 380 450]);

    for i = 1:length(exp_name)
        ydiff_foreL(:,:,i) = all_ys{i}(:,1,:) - all_ys{i}(:,3,:);

        if any(ismember(plot_ds, right_plots))
            y_FR(:,:,i) = all_ys{i}(:,1,:);
            y_FL(:,:,i) = -all_ys{i}(:,3,:);
        elseif any(ismember(plot_ds, left_plots))
            y_FR(:,:,i) = -all_ys{i}(:,1,:);
            y_FL(:,:,i) = all_ys{i}(:,3,:);
        end

    % Calculate ratios FR/FR-FL and FL/FR-FL for AE
         x_ae = [data{j}.data.session_info.first_ae];
         
         y_FR_ratio(:,:,i) = y_FR(x_ae,:,i)./ydiff_foreL(x_ae,:,i);
         y_FL_ratio(:,:,i) = y_FL(x_ae,:,i)./ydiff_foreL(x_ae,:,i);

    % Create line of best fit for adaptation
     x_adpt = data{j}.data.session_info.first_split:data{j}.data.session_info.last_split;
 
     for a = 1:n_animals
         coef_FR(a,:,i) = polyfit(x_adpt, y_FR(x_adpt,a,i),1);
         coef_FL(a,:,i) = polyfit(x_adpt, y_FL(x_adpt,a,i),1);
         coef_sym(a,:,i) = polyfit(x_adpt, ydiff_foreL(x_adpt,a,i),1);
    
         line_FR(a,:,i) = polyval(coef_FR(a,:,i), x_adpt);
         line_FL(a,:,i) = polyval(coef_FL(a,:,i), x_adpt);
         line_sym(a,:,i) = polyval(coef_sym(a,:,i), x_adpt);
         
         slope_FR(a,:,i) = coef_FR(a,1,i);
         slope_FL(a,:,i) = coef_FL(a,1,i);
         slope_sym(a,:,i) = coef_sym(a,1,i);
    
         theta_FR(a,:,i) = rad2deg(atan2(slope_FR(a,:,i), 1));
         theta_FL(a,:,i) = rad2deg(atan2(slope_FL(a,:,i), 1));
         theta_sym(a,:,i) = rad2deg(atan2(slope_sym(a,:,i), 1));
    
         theta_FR_ratio(a,:,i) = theta_FR(a,:,i)./theta_sym(a,:,i);
         theta_FL_ratio(a,:,i) = theta_FL(a,:,i)./theta_sym(a,:,i);
     end
         
    % Plot scatter plot of pre and post, individual animals
        x_plot = [1, 2];
        plot(x_plot(i)-0.3, theta_FR_ratio(:,:,i), 'ro'); hold on;
        plot(x_plot(i)+0.3, theta_FL_ratio(:,:,i), 'bo'); hold on;
    end
    
% MEANS
    % Isolate FR, FL, difference between the limbs
    mean_y_foreL(:,i) = mean_y(:,1,i) - mean_y(:,3,i);

    if any(ismember(plot_ds, right_plots))      
        mean_y_FR(:,i) = mean_y(:,1,i);
        mean_y_FL(:,i) = -mean_y1(:,3,i);

    elseif any(ismember(plot_ds, left_plots))
        mean_y_FR(:,i) = -mean_y(:,1,i);
        mean_y_FL(:,i) = mean_y1(:,3,i);
    end
       
    % Calculate ratios FR/FR-FL and FL/FR-FL for AE 
     mean_y_FR_ratio(:,i) = mean_y_FR(x_ae,i)./mean_y_foreL(x_ae,i);
     mean_y_FL_ratio(:,i) = mean_y_FL(x_ae,i)./mean_y_foreL(x_ae,i);

     % Create line of best fit for adaptation     
     coef_mean_FR(:,i) = polyfit(x_adpt, mean_y_FR(x_adpt,i),1);
     coef_mean_FL(:,i) = polyfit(x_adpt, mean_y_FL(x_adpt,i),1);
     coef_mean_sym(:,i) = polyfit(x_adpt, mean_y_foreL(x_adpt,i),1);

     line_mean_FR(:,i) = polyval(coef_mean_FR(:,i), x_adpt);
     line_mean_FL(:,i) = polyval(coef_mean_FL(:,i), x_adpt);
     line_mean_sym(:,i) = polyval(coef_mean_sym(:,i), x_adpt);
     
     slope_mean_FR(:,i) = coef_mean_FR(1,i);
     slope_mean_FL(:,i) = coef_mean_FL(1,i);
     slope_mean_sym(:,i) = coef_mean_sym(1,i);

     theta_mean_FR(:,i) = rad2deg(atan2(slope_mean_FR(:,i), 1));
     theta_mean_FL(:,i) = rad2deg(atan2(slope_mean_FL(:,i), 1));
     theta_mean_sym(:,i) = rad2deg(atan2(slope_mean_sym(:,i), 1));

    end

    % Statistics
    % Paired t test
    [~, p_adptFR] = ttest(theta_FR_ratio(:,:,1), theta_FR_ratio(:,:,2));
    [~, p_adptFL] = ttest(theta_FL_ratio(:,:,1), theta_FL_ratio(:,:,2));
    [~, p_aeFR] = ttest(y_FR_ratio(:,:,1), y_FR_ratio(:,:,2));
    [~, p_aeFL] = ttest(y_FL_ratio(:,:,1), y_FL_ratio(:,:,2));

    p_adpt = [p_adptFR p_adptFL];
    p_ae = [p_aeFR p_aeFL];

    % Wilcoxon Signed Rank test
    [pW_adptFR, ~] = signrank(theta_FR_ratio(:,:,1), theta_FR_ratio(:,:,2));
    [pW_adptFL, ~] = signrank(theta_FL_ratio(:,:,1), theta_FL_ratio(:,:,2));
    [pW_aeFR,~] = signrank(y_FR_ratio(:,:,1), y_FR_ratio(:,:,2));
    [pW_aeFL, ~] = signrank(y_FL_ratio(:,:,1), y_FL_ratio(:,:,2));

    pW_adpt = [pW_adptFR pW_adptFL];
    pW_ae = [pW_aeFR pW_aeFL];

    % Create excel files with statistical results
    columnNames = {'Adaptation', 'AE'};
    rowNames = {'FR', 'HR', 'FL', 'HL'};

    p_table = table(p_adpt, p_ae, 'VariableNames', columnNames, 'RowNames', rowNames);
    p_table.Properties.RowNames = rowNames;
    pW_table = table(pW_adpt, pW_ae, 'VariableNames', columnNames, 'RowNames', rowNames);
    pW_table.Properties.RowNames = rowNames;
    
    if exist(filePath, 'file') == 2
        if numel(sheetnames(filePath)) < 4
            writetable(p_table, filePath, 'Sheet', [exp_name{2}], 'WriteMode', 'append');
            writetable(pW_table, filePath, 'Sheet', [exp_name{2}], 'WriteMode', 'append');
        else

        end
    else
        writetable(p_table, filePath, 'Sheet', [exp_name{2}]);
        writetable(pW_table, filePath, 'Sheet', [exp_name{2}]);
    end
end
end
